Every token has one writer, multiple readers
YAML file consists of the following information:
	token: <token id>
	writer: <ip address>:<port>
	reader: array of (<ip address>:<port>)
Server nodes create tokens when they start
	(every server command automatically creates a token and its YAML file as above)
Write requests go to the writer node
Read requests go to any of the reader nodes at random
When a write is done, the replicas in all the reader nodes have to be updated as well
All the writes have to happen in order to follow atomic semantics:
	a read can happen only after a write
	if one read returns a value x, and a subsequent read returns y, then the write of x should happen before write of y
Emulate fail silent behavior:
	server stops responding for a random token after time t

Questions:
	Is the drop operation still available?
	How the fuck do I create persistent processes?

Notes:
	Okay so the first thing should be the presence of a YAML file with information about tokens
	Once the fucking YAML file is ready, the next step should be the invoking of a server process with the YAML file
	This implies that when the server is created, processes on the access points should be created simultaneously
	The create RPC call must:
		create the writer and reader access points
		create the token at the aforementioned access points
	The write RPC call must:
		calculate the partial value
		update the partial value
		update all the reader nodes token values as well (low, mid, high, partialval)
	The read RPC call must:
		if the partial values in the replicas are 0 then the read operation must fail
		calculate the final value
		return the final value
	The drop RPC call must (if exists):
		drop the token from the all the access points
	A support update RPC call must be able to:
		create the token
		update the token with the write values
		drop the token
	Needed support functions:
		check if token exists
		print current token
		print all tokens

Things to do:
	Test YAML files
	Prepare the message formats
	Copy the codes from token management